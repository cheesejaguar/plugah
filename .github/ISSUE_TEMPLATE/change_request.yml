name: "Change Request (Bug or Feature)"
description: "Request a bug fix or feature. Include a Claude Code prompt and branch/PR instructions."
title: "[Bug] or [Feature Request]: <short summary>"
labels: []
assignees: []

body:
  - type: markdown
    attributes:
      value: |
        Thanks for filing an issue! Please:
        - Prefix the issue title with [Bug] or [Feature Request].
        - Provide a complete prompt for Claude Code to implement your changes in a new branch.
        - You are encouraged to create the branch and open a PR yourself while you're here.

  - type: checkboxes
    id: title_prefix
    attributes:
      label: Title Prefix
      description: Confirm the issue title starts with [Bug] or [Feature Request].
      options:
        - label: I prefixed the title with [Bug] or [Feature Request].
          required: true

  - type: textarea
    id: overview
    attributes:
      label: Summary / Context
      description: Briefly explain the problem or desired behavior, constraints, and relevant files/modules.
      placeholder: >
        Example: When running the executor, budget warnings don't trigger model downgrades correctly. The CFO should generate patches when soft cap is exceeded to switch to economy models.
    validations:
      required: true

  - type: textarea
    id: claude_prompt
    attributes:
      label: Claude Code Prompt (Detailed)
      description: Paste a detailed prompt to run with Claude Code. It should instruct the agent to load this repo in your vibecoder of choice, create a new branch, implement the change, update docs/tests, and open a PR.
      render: markdown
      value: |
        You are Claude Code working in the "plugah" repository (Multi-agent orchestration system).

        Goal:
        - [Replace with your Bug or Feature description]

        Instructions:
        - Load the repository in your vibecoder of choice (Cursor, Windsurf, VS Code + Continue, Zed, etc.).
        - Create a new branch from `main`:
          ```bash
          git checkout main
          git pull origin main
          git checkout -b <issue-type>/<brief-description>
          ```
        - Implement the change:
          - [Describe specific changes needed]
          - Update relevant files in `plugah/` directory
          - Follow existing code patterns and conventions
        - Run tests and linting:
          ```bash
          source .venv/bin/activate
          pytest
          ruff check plugah
          mypy plugah
          ```
        - Update documentation if needed:
          - Update README.md if adding new features
          - Update CHANGELOG.md with your changes
          - Update CLAUDE.md if changing development workflows
        - Commit with a descriptive message:
          ```bash
          git add -A
          git commit -m "<type>: <description>"
          ```
        - Push branch and open PR:
          ```bash
          git push -u origin <branch-name>
          gh pr create --title "<type>: <description>" --body "Fixes #<issue-number>"
          ```

        Acceptance Criteria:
        - [ ] Tests pass (`pytest`)
        - [ ] Linting passes (`ruff check`)
        - [ ] Type checking passes (`mypy`)
        - [ ] Documentation updated
        - [ ] Follows semantic commit message format
    validations:
      required: true

  - type: textarea
    id: acceptance_criteria
    attributes:
      label: Acceptance Criteria
      description: List specific criteria that must be met for this change to be considered complete.
      placeholder: |
        - Budget downgrades trigger at soft cap threshold
        - Model tier changes are logged in audit trail
        - Tests cover edge cases for budget enforcement
        - Documentation explains budget control behavior
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: Priority
      description: How urgent is this change?
      options:
        - Low
        - Medium
        - High
        - Critical
      default: 0
    validations:
      required: true

  - type: dropdown
    id: component
    attributes:
      label: Component
      description: Which component does this affect?
      options:
        - Core Orchestrator (BoardRoom)
        - Planning (OAG Generation)
        - Execution (Task Runner)
        - Budget Management (CFO)
        - Metrics & OKRs
        - Tools & Agents
        - Web Interface
        - API & Types
        - Documentation
        - Other
      default: 0
    validations:
      required: true

  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-submission Checklist
      description: Please confirm the following before submitting.
      options:
        - label: I searched existing issues to avoid duplicates.
        - label: I included a detailed Claude Code prompt.
        - label: I specified clear acceptance criteria.
        - label: I'm willing to help test the changes.