name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"
    
    - name: Run ruff check
      run: |
        ruff check plugah tests
        ruff format --check plugah tests
    
    - name: Run mypy
      run: mypy plugah --ignore-missing-imports
      continue-on-error: true  # Allow mypy failures for now

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to save CI time
          - os: windows-latest
            python-version: '3.10'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev,demo]"
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=plugah --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  test-cli:
    name: Test CLI Demo
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install package
      run: |
        uv pip install --system -e ".[demo]"
    
    - name: Test CLI help
      run: |
        plugah-demo --help
        python -m plugah.demo.demo_cli --help
    
    - name: Test CLI execution
      run: |
        timeout 30 plugah-demo --prompt "Test project" --budget 100 || true
      continue-on-error: true

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: web/frontend
      run: npm ci
    
    - name: Type check
      working-directory: web/frontend
      run: npx tsc --noEmit
    
    - name: Build production bundle
      working-directory: web/frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: web/frontend/dist/

  integration:
    name: Integration Tests
    needs: [test, build-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install package
      run: |
        uv pip install --system -e ".[dev,demo]"
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: web/frontend/dist/
    
    - name: Start backend server
      run: |
        cd web/backend
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 5
    
    - name: Test API health
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/api/info
    
    - name: Test startup endpoint
      run: |
        curl -X POST http://localhost:8000/startup/start \
          -H "Content-Type: application/json" \
          -d '{"project_title": "Test", "prompt": "Test project", "budget": 100}'

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install safety bandit
    
    - name: Run safety check
      run: safety check --json
      continue-on-error: true
    
    - name: Run bandit
      run: bandit -r plugah -f json -o bandit-report.json
      continue-on-error: true